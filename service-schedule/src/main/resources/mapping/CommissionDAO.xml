<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zx.serviceschedule.mapper.CommissionDAO">
  <resultMap id="BaseResultMap" type="com.zx.serviceschedule.model.Commission">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="contract_id" jdbcType="INTEGER" property="contractId" />
    <result column="sign_date" jdbcType="DATE" property="signDate" />
    <result column="actual_id" jdbcType="INTEGER" property="actualId" />
    <result column="percentage" jdbcType="INTEGER" property="percentage" />
    <result column="money" jdbcType="INTEGER" property="money" />
    <result column="saler_id" jdbcType="INTEGER" property="salerId" />
    <result column="pay_tag" jdbcType="BIT" property="payTag" />
    <result column="due_date" jdbcType="DATE" property="dueDate" />
    <result column="finish_date" jdbcType="DATE" property="finishDate" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="days" jdbcType="INTEGER" property="days" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, contract_id, sign_date, actual_id, percentage, money, saler_id, pay_tag, due_date, 
    finish_date, `status`, `days`, remark
  </sql>
  <select id="selectByExample" parameterType="com.zx.serviceschedule.model.CommissionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from commission
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from commission
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from commission
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zx.serviceschedule.model.CommissionExample">
    delete from commission
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.zx.serviceschedule.model.Commission" useGeneratedKeys="true">
    insert into commission (contract_id, sign_date, actual_id, 
      percentage, money, saler_id, 
      pay_tag, due_date, finish_date, 
      `status`, `days`, remark
      )
    values (#{contractId,jdbcType=INTEGER}, #{signDate,jdbcType=DATE}, #{actualId,jdbcType=INTEGER}, 
      #{percentage,jdbcType=INTEGER}, #{money,jdbcType=INTEGER}, #{salerId,jdbcType=INTEGER}, 
      #{payTag,jdbcType=BIT}, #{dueDate,jdbcType=DATE}, #{finishDate,jdbcType=DATE}, 
      #{status,jdbcType=INTEGER}, #{days,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.zx.serviceschedule.model.Commission" useGeneratedKeys="true">
    insert into commission
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="contractId != null">
        contract_id,
      </if>
      <if test="signDate != null">
        sign_date,
      </if>
      <if test="actualId != null">
        actual_id,
      </if>
      <if test="percentage != null">
        percentage,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="salerId != null">
        saler_id,
      </if>
      <if test="payTag != null">
        pay_tag,
      </if>
      <if test="dueDate != null">
        due_date,
      </if>
      <if test="finishDate != null">
        finish_date,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="days != null">
        `days`,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="contractId != null">
        #{contractId,jdbcType=INTEGER},
      </if>
      <if test="signDate != null">
        #{signDate,jdbcType=DATE},
      </if>
      <if test="actualId != null">
        #{actualId,jdbcType=INTEGER},
      </if>
      <if test="percentage != null">
        #{percentage,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        #{money,jdbcType=INTEGER},
      </if>
      <if test="salerId != null">
        #{salerId,jdbcType=INTEGER},
      </if>
      <if test="payTag != null">
        #{payTag,jdbcType=BIT},
      </if>
      <if test="dueDate != null">
        #{dueDate,jdbcType=DATE},
      </if>
      <if test="finishDate != null">
        #{finishDate,jdbcType=DATE},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="days != null">
        #{days,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zx.serviceschedule.model.CommissionExample" resultType="java.lang.Long">
    select count(*) from commission
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update commission
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.contractId != null">
        contract_id = #{record.contractId,jdbcType=INTEGER},
      </if>
      <if test="record.signDate != null">
        sign_date = #{record.signDate,jdbcType=DATE},
      </if>
      <if test="record.actualId != null">
        actual_id = #{record.actualId,jdbcType=INTEGER},
      </if>
      <if test="record.percentage != null">
        percentage = #{record.percentage,jdbcType=INTEGER},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=INTEGER},
      </if>
      <if test="record.salerId != null">
        saler_id = #{record.salerId,jdbcType=INTEGER},
      </if>
      <if test="record.payTag != null">
        pay_tag = #{record.payTag,jdbcType=BIT},
      </if>
      <if test="record.dueDate != null">
        due_date = #{record.dueDate,jdbcType=DATE},
      </if>
      <if test="record.finishDate != null">
        finish_date = #{record.finishDate,jdbcType=DATE},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.days != null">
        `days` = #{record.days,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update commission
    set id = #{record.id,jdbcType=INTEGER},
      contract_id = #{record.contractId,jdbcType=INTEGER},
      sign_date = #{record.signDate,jdbcType=DATE},
      actual_id = #{record.actualId,jdbcType=INTEGER},
      percentage = #{record.percentage,jdbcType=INTEGER},
      money = #{record.money,jdbcType=INTEGER},
      saler_id = #{record.salerId,jdbcType=INTEGER},
      pay_tag = #{record.payTag,jdbcType=BIT},
      due_date = #{record.dueDate,jdbcType=DATE},
      finish_date = #{record.finishDate,jdbcType=DATE},
      `status` = #{record.status,jdbcType=INTEGER},
      `days` = #{record.days,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zx.serviceschedule.model.Commission">
    update commission
    <set>
      <if test="contractId != null">
        contract_id = #{contractId,jdbcType=INTEGER},
      </if>
      <if test="signDate != null">
        sign_date = #{signDate,jdbcType=DATE},
      </if>
      <if test="actualId != null">
        actual_id = #{actualId,jdbcType=INTEGER},
      </if>
      <if test="percentage != null">
        percentage = #{percentage,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=INTEGER},
      </if>
      <if test="salerId != null">
        saler_id = #{salerId,jdbcType=INTEGER},
      </if>
      <if test="payTag != null">
        pay_tag = #{payTag,jdbcType=BIT},
      </if>
      <if test="dueDate != null">
        due_date = #{dueDate,jdbcType=DATE},
      </if>
      <if test="finishDate != null">
        finish_date = #{finishDate,jdbcType=DATE},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="days != null">
        `days` = #{days,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zx.serviceschedule.model.Commission">
    update commission
    set contract_id = #{contractId,jdbcType=INTEGER},
      sign_date = #{signDate,jdbcType=DATE},
      actual_id = #{actualId,jdbcType=INTEGER},
      percentage = #{percentage,jdbcType=INTEGER},
      money = #{money,jdbcType=INTEGER},
      saler_id = #{salerId,jdbcType=INTEGER},
      pay_tag = #{payTag,jdbcType=BIT},
      due_date = #{dueDate,jdbcType=DATE},
      finish_date = #{finishDate,jdbcType=DATE},
      `status` = #{status,jdbcType=INTEGER},
      `days` = #{days,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>